library(ggplot2)
# Example Exponential Distribution
expDist = NULL
set.seed(999) #For reporduceability
expDist = data.frame(rexp(40000, rate=0.2))
colnames(expDist) = c("values")
ggplot(expDist, aes(x=values)) +
geom_histogram(colour="black", fill="white") +
ggtitle("40K Sample from Exponential Distribution") +
xlab("Values") +
ylab("Count")
expDistMean = mean(expDist)
expDistMean
head(expDist)
expDistMean = sum(expDist)
expDistMean = sum(expDist)/40000
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = data.frame(expMeans)
colnames(expMeans) = c("means")
mean(expMeans)
sum(expMeans)
sum(expMeans)/1000
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = data.frame(expMeans)
colnames(expMeans) = c("means")
# Plot the Means Distribution
ggplot(expMeans, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical xintercept of 1/lambda or 1/0.2 is 5
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
sum(expMeans)/1000
sd(expMeans)
View(expMeans)
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = data.frame(as.numeric(expMeans))
colnames(expMeans) = c("means")
expMeans = data.frame(as.numeric(expMeans))
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = data.frame(expMeans)
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = as.data.frame(expMeans)
mean(expMeans)
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = NULL
expMeans = as.data.frame(NULL)
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeans = as.data.frame(expMeans)
mean(expMeans)
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeansPlot = as.data.frame(expMeans)
colnames(expMeans) = c("means")
mean(expMeans)
expMeansPlot = as.data.frame(expMeans)
colnames(expMeansPlot) = c("means")
View(expMeansPlot)
mean(expMeans)
sd(expMeans)
var(expMeans)
5^2/40
5/sqrt(40)
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical xintercept of 1/lambda or 1/0.2 is 5
geom_vline(xintercept = mean(expMeans), size = 1, colour = "blue") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
# Plot the Means Distribution
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical xintercept of 1/lambda or 1/0.2 is 5
geom_vline(xintercept = mean(means), size = 1, colour = "blue") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
expMeanLineValue = mean(expMeans)
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical xintercept of 1/lambda or 1/0.2 is 5
geom_vline(xintercept = expMeanLineValue, size = 1, colour = "blue") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical xintercept of 1/lambda or 1/0.2 is 5
geom_vline(xintercept = 5.029, size = 1, colour = "blue") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical xintercept of 1/lambda or 1/0.2 is 5
geom_vline(xintercept = 7, size = 1, colour = "blue") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
geom_vline(xintercept = 7, size = 1, colour = "blue") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
geom_vline(xintercept = 7, size = 1, colour = "red") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
expMeansPlot = as.data.frame(expMeans)
colnames(expMeansPlot) = c("means")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
expMeans = as.data.frame(expMeans)
ggplot(expMeans, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
set.seed(999) #For reporduceability
expMeans = NULL
for (i in 1:1000) {
expMeans = c(expMeans, mean(rexp(40, rate=0.2)))
}
expMeansPlot = as.data.frame(expMeans)
colnames(expMeansPlot) = c("means")
expMeanLineValue = mean(expMeans)
ggplot(expMeans, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
expMeansPlot = data.frame(expMeans)
colnames(expMeansPlot) = c("means")
# Plot the Means Distribution
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeans$means),sd=sd(expMeans$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Sampled Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical mean line
geom_vline(xintercept = mean(expMeansPlot$means), size = 1, colour = "red") + #Simulation mean line
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical mean line
geom_vline(xintercept = mean(expMeansPlot$means), size = 0.5, colour = "red") + #Simulation mean line
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical mean line
geom_vline(xintercept = mean(expMeansPlot$means), size = 0.5, colour = "red") + #Simulation mean line
annotate("text", x = 4, y = 25, label = "Some text") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical mean line
geom_vline(xintercept = mean(expMeansPlot$means), size = 0.5, colour = "red") + #Simulation mean line
#annotate("text", x = 4, y = 25, label = "Some text") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
shapiro.test(expMeans)
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
#stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
geom_vline(xintercept = 5, size = 1, colour = "black") + #Theoretical mean line
geom_vline(xintercept = mean(expMeansPlot$means), size = 0.5, colour = "red") + #Simulation mean line
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
ggplot(expMeansPlot, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot$means),sd=sd(expMeansPlot$means)),size = 1, colour = "black") +
ggtitle("Mean of 1000 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
set.seed(999) #For reporduceability
expMeans100 = NULL
for (i in 1:100) {
expMeans100 = c(expMeans100, mean(rexp(40, rate=0.2)))
}
expMeansPlot100 = data.frame(expMeans100)
colnames(expMeansPlot100) = c("means")
ggplot(expMeansPlot100, aes(x=means)) +
geom_histogram(colour="black", fill="white", aes(y=..density..)) +
stat_function(fun=dnorm, args=list(mean=mean(expMeansPlot100$means),sd=sd(expMeansPlot100$means)),size = 1, colour = "black") +
ggtitle("Mean of 100 Exponential Distributions of n=40") +
xlab("Simulation Means") +
ylab("Density")
expDist = NULL
set.seed(999) #For reporduceability
expDist = data.frame(rexp(40000, rate=0.2))
colnames(expDist) = c("values")
# Plot the Frequency Histogram
ggplot(expDist, aes(x=values)) +
geom_histogram(colour="black", fill="white") +
ggtitle("Illustrative Example of Freq Hist Sampled from an Exponential Distribution") +
xlab("Values") +
ylab("Count")
install.packages("rmarkdown")
getOptions("repos")
install.packages("rmarkdown")
remove.packages("rmarkdown")
install.packages("rmarkdown")
sessionInfo()
install.packages("mgcv")
install.packages("ggplot2")
# Load Tooth Growth Dataset
ToothGrowth = data("ToothGrowth")
data("ToothGrowth")
# Load Tooth Growth Dataset
ToothGrowth = data("ToothGrowth")
data("ToothGrowth")
data("ToothGrowth")
ToothGrowth
View(ToothGrowth)
x_bar <- 1100
s <- 30
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
round(x_bar + c(-1, 1) * ts * s / sqrt(n))
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
s <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2)/(n1 + n2 - 2))
(x1 - x2) + c(-1, 1) * qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
x_bar <- 1100
s <- 30
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
round(x_bar + c(-1, 1) * ts * s / sqrt(n)) # 1077 1123
x_bar <- -2
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
s <- -x_bar*sqrt(n) / ts
s
n_x <- 10
n_y <- 10
x_bar <- 5 # old_system
y_bar <- 3 # new_system
var_x <- 0.6
var_y <- 0.68
alpha <- 0.05
sp_2 <- ((n_x - 1)*var_x + (n_y - 1)*var_y) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((y_bar - x_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 2)
# -2.75 -1.25
n_x <- 100
n_y <- 100
x_bar <- 6
y_bar <- 4
s_x <- 2
s_y <- 0.5
alpha <- 0.05
sp_2 <- ((n_x - 1)*s_x^2 + (n_y - 1)*s_y^2) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((x_bar - y_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 2)
n_x <- 9
n_y <- 9
x_bar <- -3
y_bar <- 1
s_x <- 1.5
s_y <- 1.8
alpha <- 0.1
sp_2 <- ((n_x - 1)*s_x^2 + (n_y - 1)*s_y^2) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((x_bar - y_bar)
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
s <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2)/(n1 + n2 - 2))
(x1 - x2) + c(-1, 1) * qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
?ToothGrowth
library(datasets)
library(data.table)
library(ggplot2)
ToothGrowth = data(ToothGrowth)
data(ToothGrowth)
ToothGrowth
data = ToothGrowth
View(ToothGrowth)
summary(data)
ToothGrowth
names(ToothGrowth) <- c("length", "supplement", "dose")
View(ToothGrowth)
library(data.table)
install.packages("data.table")
library(data.table)
dtToothGrowth = data.table(ToothGrowth) #Convert to data.table
View(dtToothGrowth)
names(ToothGrowth) <- c("length", "supplement", "dose")
names(dtToothGrowth) <- c("length", "supplement", "dose")
View(dtToothGrowth)
levels(dtToothGrowth$supplement) = c('Orange Juice','Ascorbic Acid')
dtToothGrowth$dose = factor(dtToothGrowth$dose)
View(dtToothGrowth)
dtToothGrowthSummary =
dtToothGrowth[,
list(
n = nrow(.SD)
,Min = min(length)
,Q1 = quantile(length, probs = 0.25)
,Median = median(length)
,Mean = mean(length)
,Q3 = quantile(length, probs = 0.75)
,Max = max(length)
,Variance = var(length)
,StdDev = sd(length)
),
by = list(supplement, dose)
]
View(dtToothGrowthSummary)
View(dtToothGrowthSummary)
violinplot = ggplot(dtToothGrowth, aes(supplement), length()) +
geom_violin()
ggplot(dtToothGrowth, aes(supplement), length()) +
geom_violin()
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_violin()
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_violin() +
ggtitle("Violin Plot of Tooth Length by Supplement") +
xlab("Supplement") +
ylab("Tooth Length")
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_violin(aes(fill=dose)) +
ggtitle("Violin Plot of Tooth Length by Supplement") +
xlab("Supplement") +
ylab("Tooth Length")
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_boxplot(aes(fill=dose)) +
ggtitle("Box Plot of Tooth Length by Supplement and Dose") +
xlab("Supplement") +
ylab("Tooth Length")
t.test(length ~ supplement, data = dtToothGrowth, paired = FALSE, var.equal = FALSE)
t.test(length ~ supplement, data = dtToothGrowth[dose == 0.5], paired = FALSE, var.equal = FALSE)
dtToothGrowth$dose = factor(dtToothGrowth$dose)
t.test(length ~ supplement, data = dtToothGrowth[dose == 0.5], paired = FALSE, var.equal = FALSE)
dtToothGrowth = data.table(ToothGrowth) #Convert to data.table
names(dtToothGrowth) <- c("length", "supplement", "dose") #
t.test(length ~ supplement, data = dtToothGrowth[dose == 0.5], paired = FALSE, var.equal = FALSE)
dtToothGrowth[,
list(
n = nrow(.SD)
,Min = min(length)
,Q1 = quantile(length, probs = 0.25)
,Median = median(length)
,Mean = mean(length)
,Q3 = quantile(length, probs = 0.75)
,Max = max(length)
,StdDev = sd(length)
),
by = list(supplement, dose)
]
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_violin(aes(fill=dose)) +
ggtitle("Violin Plot of Tooth Length by Supplement and Dose") +
xlab("Supplement") +
ylab("Tooth Length")
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_boxplot(aes(fill=dose)) +
ggtitle("Box Plot of Tooth Length by Supplement and Dose") +
xlab("Supplement") +
ylab("Tooth Length")
dtToothGrowth$dose = factor(dtToothGrowth$dose)
dtToothGrowth = data.table(ToothGrowth) #Convert to data.table
names(dtToothGrowth) <- c("length", "supplement", "dose") #
levels(dtToothGrowth$supplement) = c('Orange Juice','Ascorbic Acid')
dtToothGrowth$fctdose = factor(dtToothGrowth$dose)
ggplot(dtToothGrowth, aes(x=supplement, y=length)) +
geom_boxplot(aes(fill=fctdose)) +
ggtitle("Box Plot of Tooth Length by Supplement and Dose") +
xlab("Supplement") +
ylab("Tooth Length")
dtToothGrowth = data.table(ToothGrowth) #Convert to data.table
names(dtToothGrowth) <- c("length", "supplement", "dose") #
levels(dtToothGrowth$supplement) = c('Orange Juice','Ascorbic Acid')
dtToothGrowth$doseFactor = factor(dtToothGrowth$dose) #Append Dose as a Factor for use in ggplot
t.test(length ~ supplement, data = dtToothGrowth[dose == 0.5], paired = FALSE, var.equal = FALSE)
t.test(length ~ supplement, data = dtToothGrowth[dose == 1.0], paired = FALSE, var.equal = FALSE)
t.test(length ~ supplement, data = dtToothGrowth[dose == 2.0], paired = FALSE, var.equal = FALSE)
